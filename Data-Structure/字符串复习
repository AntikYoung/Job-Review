概念与定义
1.字符串是由n个字符串组成的有限序列。以'\0'字符结尾，通常在计算字符串的长度时，不考虑'\0',而在计算其在内存中的大小时（sizeof），考虑'\0'。
字符串类C++实现
#include <string.h>
class String
{
    public :
    String();
    String(const char *p);
    ~String(){delete[] str};
...
    int Find(int i,String &p);
private:
    int n;
    char *str;
};
String::String(const char *p)
{
 n=strlen(p);
 str= new char[n+1];
 strcpy(str,p);
}
2.字符串也有两种存储方式，顺序表示和链接表示。C++中的字符串在内存是顺序存储的，C++字符串可以通过下标去处理。
  c++ string 内存分配
      每当程序将一个字母附加到字符串末尾时将发生什么呢？不能仅将已有的字符串加大，因为相邻的内存可能被占用了。因此，可能需要分配一个新的内存块，并将原来的内容复制到新的内存块单元中。如果执行了大量这样的操作，效率将非常低，因此很多c++实现分配一个比实际字符串大的内存块，为字符串提供了增大空间。然而，如果字符串不断增大，超过了内存卡的大小，程序将分配一个大小为原来两倍的新内存块，以提供足够的增啊空间，避免不断地分配新的内存块。方法capacity()返回当前分配给字符串的内存块的大小，而reserve()方法让您能够请求内存块的最小长度。
代码示例：
[cpp]  view plain copy print ?
#include "stdafx.h"  
#include <iostream>  
#include <string>  
  
int _tmain(int argc, _TCHAR* argv[])  
{  
    using namespace std;  
  
    string empty;  
    string small = "bit";  
    string large = "Elephants are a girl's best friend";  
  
    cout << "Sizes:"<<endl;  
    cout << "\tempty: "<< empty.size()<<endl;  
    cout << "\tsmall: "<< small.size()<<endl;  
    cout << "\tlarge: "<< large.size()<<endl;  
  
    //重新分配内存大小  
    cout << "Capactities: \n";  
    cout << "\tempty: "<< empty.capacity()<<endl;  
    cout << "\tsmall: "<< small.capacity()<<endl;  
    cout << "\tlarge: "<< large.capacity()<<endl;  
  
    //reserve方法能够请求内存块的最小长度  
    empty.reserve(50);  
    cout << "Capacity after empty.reserve(50): "  
         << empty.capacity() << endl;  
  
    return 0;  
}  
程序输出： 

java中关于String的说明
http://my.oschina.net/xiaohui249/blog/170013
http://fanyo.iteye.com/blog/427097


笔试面试题
1. 压缩一个字符串当中的空格,例如把" I  like   csdn    "压缩成"I like csdn"。注意，单词之间的空格，N个空格要压缩到1个，也就是要减少N-1个空格。行首/行尾的空格全部去掉。
     算法复杂度O(n)，扫描一遍，在扫描的过程中记住当前已经有了多少个多余的空格(pos)，然后把非空格的字符都向前移动pos个字符。处理完了整个字符串以后再从行尾往前扫描到底一个非空格字符，再其后面填上'\0'，工作完成。
[cpp]  view plain copy
#include<string>  
using namespace std;  
void f(char* str){//输入/输出参数  
    if(str==nullptr || str[0]=='\0')return;//错误处理  
    size_t len = strlen(str);  
    size_t pos = 0;//当前已经压缩的空格数量  
    bool fSpace = false;  
    bool fIsTail = false;  
    for(size_t i = 0; i<len; ++ i){  
        if(str[i]==' '){  
            if(!fSpace){  
                fSpace=true;//开始空格子串  
                if(i==0){  
                    ++pos;//行首空格  
                }  
            }else{//有了标志位了,说明是多余空格  
                ++pos;  
            }  
        }else{//当前不是空格  
            if(fSpace==true)fSpace=false;  
            str[i-pos]=str[i];  
            str[i]=' ';  
        }  
    }  
    while(str[--len]==' ');  
    str[len+1]='\0';  
}  
int main(){  
    char buf[]=" I  like   csdn    ";  
    f(buf);//压缩空格  
    printf("%s,%d\n",buf,strlen(buf));  
    return 0;  
}  
2.  汉字编码的题目，例如输入一个数字串"00001204567809001"输出"一万两千零四十五亿六千七百八十万九千零一"
分析: k可以分步骤进行，先对字符串进行错误处理，然后遍历前面的0，找到真正的数字开始的地方。
计算的过程需要将整个字符串分段，8个字符一段(亿)，其中又要再次分为两段(万)，然后对于4位数进行编码
[cpp]  view plain copy
#include"stdafx.h"  
#include <iostream>  
#include <cassert>  
#include <cstring>  
#include <string>  
#include <vector>  
using namespace std;  
  
const char yi[]  = "亿";  
const char wan[] = "万";  
const char* table[] ={  
    "十","百","千",  
};  
const char* digits[] ={  
    "零","一","二","三","四","五","六","七","八","九"  
};  
char* preprocess(char* psz){//错误处理，预处理  
    if(psz==nullptr||*psz==0)return nullptr;  
    size_t len = strlen(psz);  
    size_t nIndex = 0;  
    for(;nIndex<len;++nIndex){  
        if(psz[nIndex]!='0')break;  
    }  
    if(nIndex==len-1)return nullptr;  
    char* pret = psz+nIndex;//去掉了字符串前面的0串  
    return pret;  
}  
size_t sum(const char*psz, size_t len){  
    size_t ret=0;  
    for(size_t s=0;s<len;++s){  
        ret+=psz[s];  
    }  
    return ret;  
}  
string sRet="";//输出字符串  
void addyi(size_t len){  
    for(size_t n=0;n<len;++n){  
        sRet+=yi;  
    }  
}  
void processNdigits(const char*psz,size_t N){//处理4个数字,N<=4  
    assert(N<=4);  
    bool fZero=false;  
    for(size_t s=0;s<N;++s){  
        if(psz[s]=='0'){  
            if(fZero==false){  
                fZero=true;//连零的请款也只输出一个零  
                if(s!=N-1)sRet+=digits[0];//个位的0不打印  
            }  
        }else{  
            fZero=false;//清除0标记  
            sRet+=digits[psz[s]-'0'];  
  
            int index=N-2-s;              
            if(index>=0)  
                sRet+=table[index];//加上十百千的单位  
        }  
    }  
}  
void process4digits(const char*psz){  
    processNdigits(psz,4);  
}  
void process(char* psz){//处理算法  
    char* s = preprocess(psz);  
    if(s==nullptr){  
        sRet="空";  
        return;  
    }  
  
    size_t len = strlen(s);  
    size_t nSection = len>>3; //按照"亿"分段  
    char* pSection = s;  
    for(size_t n=0;n<=nSection;++n){ //处理每个分段  
        //首先计算当前段的长度和起始指针。除了第一个段长度可能比8少以外，其他都是8个字节  
        size_t nSectionLen=(n==0)?(len%8):8;//当前段的长度  
        if(nSectionLen==0)continue;  
  
        //每个分段划分成前4个数字(万位)和后4个数字  
        else if(nSectionLen==8){  
            if(sum(pSection,4)==0){//如果万位全0，那么需要给万位自身输出一个'零'  
                pSection+=4;  
                sRet+=table[0];//输出'零'  
            }else{//处理万位的4个数字并加上万  
                process4digits(pSection);  
                sRet+=wan;  
            }  
  
            pSection+=4;  
            process4digits(pSection);//处理千位到个位的4个数字  
        }else{//开始的一段数字，不够8位  
            if(nSectionLen>4){  
                size_t leadingLen = nSectionLen-4;  
                processNdigits(pSection,leadingLen);  
                nSectionLen=4;  
                pSection+=leadingLen;  
                sRet+=wan;  
            }  
            processNdigits(pSection,nSectionLen);  
            pSection+=nSectionLen;  
        }  
        addyi(nSection-n);  
    }  
    cout<<sRet<<endl;  
}  
  
int main()  
{  
    char di[]="00001204567809001";  
    process(di);  
    return 0;  
}  
3 字符串的逆序
http://www.cnblogs.com/graphics/archive/2011/03/09/1977717.html 
字符串的逆序，因为字符串存储的顺序表示的属性，逆序就比较容易了。
方法一：新建一个数组，将原字符串从尾到头一次输入到另外一个数组。
方法二：两个下标，分别表示头和尾，依次将头尾交换，然后将两个下标往下移一位。

英文叫做in-place reverse。这是最常考的，原地逆序意味着不允额外分配空间，主要有以下几种方法，思想都差不多，就是将字符串两边的字符逐个交换，如下图。给定字符串"abcdef"，逆序的过程分别是交换字符a和f，交换字符b和e，交换字符c和d。

一 设置两个指针，分别指向字符串的头部和尾部，然后交换两个指针所指的字符，并向中间移动指针直到交叉。

char* Reverse(char* s)
{
    // p指向字符串头部
    char* p = s ;

    // q指向字符串尾部
    char* q = s ;
    while( *q )
        ++q ;
    q -- ;

    // 交换并移动指针，直到p和q交叉
    while(q > p)
    {
        char t = *p ;
        *p++ = *q ;
        *q-- = t ;
    }

    return s ;
}


关于字符串逆序的扩展请参考之前给出链接。

4.字符串匹配
KMP算法用于字符串模式匹配，目标串T=[T1.....Tn]，模式串P=[P1....Pm]，这里n>=m，i代表T的索引指针，j代表P的索引指针，传统字符串匹配算法，在Ti!=Pj的时候，i指针需要回退到i-j的位置，同时j回退到0，也就是模式串P开始的位置，这样传统算法的匹配过程的复杂度就是O(m*n)。其实在Ti!=Pj的时候，i指针不需要回退，[Ti-j+1...Ti-1]和[P1....Pj-1]是相等的，可能只需要让j回退到中间的某个位置k，使得T[1....k]=T[j-k,j-1]。这个过程相当于，把已经匹配的P[1....j-1]，找出最长的相等的前缀和后缀。
                   
     从上图中可以看出，模式串P，目标串T，在i=9，j=5的位置，字符不匹配，这时传统的做法是将i回退到这轮匹配开始的字符i=5的下一个字符，i=6，同时将j回退到0的位置。但是我们发现已经匹配的T[5....8]=P[0....3]，把相等的部分记成字符串集合J[0....3]，可行的一种做法就是：把T模式串的i位置之前的一部分看成是刚才J串的后缀，把P串开始的一部分看做是J串的前缀，那么如果这个前缀和后缀相等的话，那么j指针回退到这个J串的最后的位置即可，因为P前缀已经保证了T后缀相等，i指针不用动，j指针移动到P模式串前缀的后一个位置即可，在尝试T[i]和P[j]的匹配。总之，在字符串匹配过程中，模式串P，T已经匹配的部分，通过这个P，T共有的部分，可以推测出，T的每个位置，后缀串和前缀串相等的最大长度。
    KMP算法的精髓就是记录模式串中前缀最后位置的next数组，我的理解是next[i]：i表示字符串后缀最后的位置，前缀开始的位置是0，k表示后缀开始的位置，P[0......i-k] =P[k.....i],这个next[i]就等于i-k。


     如上图，模式串P=''abcaabc''，next[6]表示以c为结尾的P串的后缀，以a开始的前缀，是的这个前缀和后缀相等，那么c的位置相对于前缀的位置，这个前缀中的位置就是next[6]的值。
代码：


void get_next( char * s, int * next) //s表示模式串，next表示next数组的头指针
{
     int length= strlen (s);
     int i=1,j=0;
                                //i表示模式串的每一个元素的指针，每次加1递增，j表示前缀串中，每一个元素的位置。
     next[0]=-1;
     for (;i<length;i++){        //开始递归模式串中每一个元素
         if (s[i]==s[j]){        //如果当前元素和前缀的第一个元素相等，表示开始匹配前缀和后缀串，j++表示前缀的下一个位置的元素。
             next[i]=j;         //同时把当前next[i]设置成为前缀中的位置。
             j++;
         } else {                 //当前位置和前缀串中的不一致，
             if (s[i]==s[0]){    //如果当前位置和前缀串中的第一个元素相同，那么表示又重新开始匹配新一轮后缀
                 next[i]=0;     //重新开始匹配后缀，所以next的值是0，表示前缀的第一个元素的位置
                 j=1;           //前缀的指针变成下一个位置
             }
             else {              //如果当前位置和第一个位置的元素也不相同，表示没有这样的以这个元素为前缀的字符串，把这个next值变成-1.
                 next[i]=-1;
                 j=0;
             }
         }
     }
}
字符串匹配：

    //target是目标串，s是模式串，data是next数组
void find( char *target, char *s, int * data){
   int i=0;              //i是目标串的指针
   int j=0;              //j是模式串的指针
   for (;i< strlen (s);){
      if (s[i]==target[j]){ //如果模式串和目标串匹配
         if (j== strlen (target)-1){ //如果完全匹配，就说明在目标串中找到了模式串
            printf ( "start:%d\n" ,i-j+1);
            break ;
         } else {
            j++; //否则继续比较下一个字符
            i++;
         }
      } else {    //如果这两个字符不匹配
        if (j==0||data[j-1]==-1){    //如果是和模式串的第一个字符做匹配失败，或者next数组的前一个值是-1，表示前一个位置的后缀，在当前模式串中找不到前缀，所以这时，i指针需要向前移动，
                 j=0;
                 i++;
             } else {               //表示匹配前缀的后一个位置的元素。
                 j=data[j-1]+1;
             }
      }
   }
}
     说明，这里next数组中每个元素的含义是，这个元素在前缀字符串中的位置，所以在当前位置j不匹配的时候，应该首先取得匹配的字符串中前缀的最后的位置，然后新的j的值就应该是j+1的位置，j之前的元素就是原来匹配字符串的前缀。如图2中所示，如果在j=6的位置元素匹配失败，那么j=6元素之前的字符串中，b元素的位置是5，应该对应到前缀中j=1的位置，那么j的位置应该是j+1=2，再和目标串去匹配。
验证程序：

总结：相对于朴素的字符串匹配算法，复杂度为O(m*n),KMP算法中目标串的指针不用回缩，复杂度为O(m+n),大大减小了模式串搜索的复杂度


5.找最大的公共子串（LCS）


http://www.cnblogs.com/xkfz007/archive/2012/10/17/2728728.html 
找 两个字符串的最长公共子串，这个子串要求在原字符串中是连续的。其实这又是一个序贯决策问题，可以用动态规划来求解。我们采用一个二维矩阵来记录中间的结 果。这个二维矩阵怎么构造呢？直接举个例子吧："bab"和"caba"(当然我们现在一眼就可以看出来最长公共子串是"ba"或"ab")
　　 b　　a　　b
c　　0　　0　　0
a　　0　　1　　0
b　　1　　0　　1
a　　0　　1　　0
我们看矩阵的斜对角线最长的那个就能找出最长公共子串。
不过在二维矩阵上找最长的由1组成的斜对角线也是件麻烦费时的事，下面改进：当要在矩阵是填1时让它等于其左上角元素加1。
　　 b　　a　　b
c　　0　　0　　0
a　　0　　1　　0
b　　1　　0　　2
a　　0　　2　　0
这样矩阵中的最大元素就是 最长公共子串的长度。
在构造这个二维矩阵的过程中由于得出矩阵的某一行后其上一行就没用了，所以实际上在程序中可以用一维数组来代替这个矩阵。
代码如下：
#include<iostream>
#include<cstring>
#include<vector>
using  namespace  std;
//str1为横向，str2这纵向
const  string LCS( const  string& str1, const  string& str2){
     int  xlen=str1.size();        //横向长度
     vector< int > tmp(xlen);         //保存矩阵的上一行
     vector< int > arr(tmp);      //当前行
     int  ylen=str2.size();        //纵向长度
     int  maxele=0;                //矩阵元素中的最大值
     int  pos=0;                   //矩阵元素最大值出现在第几列
     for ( int  i=0;i<ylen;i++){
         string s=str2.substr(i,1);
         arr.assign(xlen,0);      //数组清0
         for ( int  j=0;j<xlen;j++){
             if (str1.compare(j,1,s)==0){
                 if (j==0)
                     arr[j]=1;
                 else
                     arr[j]=tmp[j-1]+1;
                 if (arr[j]>maxele){
                     maxele=arr[j];
                     pos=j;
                 }
             }      
         }
//      {
//          vector<int>::iterator iter=arr.begin();
//          while(iter!=arr.end())
//              cout<<*iter++;
//          cout<<endl;
//      }
         tmp.assign(arr.begin(),arr.end());
     }
     string res=str1.substr(pos-maxele+1,maxele);
     return  res;
}
int  main(){
     string str1( "21232523311324" );
     string str2( "312123223445" );
     string lcs=LCS(str1,str2);
     cout<<lcs<<endl;
     return  0;
}



6.最大公共子序列
最长公共子序列与最长公共子串的区别在于最长公共子序列不要求在原字符串中是连续的，比如ADE和ABCDE的最长公共子序列是ADE。
我们用动态规划的方法来思考这个问题如是求解。首先要找到状态转移方程：
等号约定，C1是S1的最右侧字符，C2是S2的最右侧字符，S1‘是从S1中去除C1的部分，S2'是从S2中去除C2的部分。
LCS(S1,S2)等于下列3项的最大者：
（1）LCS（S1，S2’）
（2）LCS（S1’，S2）
（3）LCS（S1’，S2’）--如果C1不等于C2； LCS（S1'，S2'）+C1--如果C1等于C2；
边界终止条件：如果S1和S2都是空串，则结果也是空串。
下面我们同样要构建一个矩阵来存储动态规划过程中子问题的解。这个矩阵中的每个数字代表了该行和该列之前的LCS的长度。与上面刚刚分析出的状态转移议程相对应，矩阵中每个格子里的数字应该这么填，它等于以下3项的最大值：
（1）上面一个格子里的数字
（2）左边一个格子里的数字
（3）左上角那个格子里的数字（如果 C1不等于C2）； 左上角那个格子里的数字+1（ 如果C1等于C2）
举个例子：
 　　　　  G　　C　　T　　A
　　 0　　0　　0　　0　　0
G　 0　　1　　1　　1　　1
B　 0　　1　　1　　1　　1
T　 0　　1　　1　　2　　2
A    0　　1　　1　　2　　3
填写最后一个数字时，它应该是下面三个的最大者：
（1）上边的数字2
（2）左边的数字2
（3）左上角的数字2+1=3,因为此时C1==C2
所以最终结果是3。
在填写过程中我们还是记录下当前单元格的数字来自于哪个单元格，以方便最后我们回溯找出最长公共子串。有时候左上、左、上三者中有多个同时达到最大，那么任取其中之一，但是在整个过程中你必须遵循固定的优先标准。在我的代码中优先级别是左上>左>上。
下图给出了回溯法找出LCS的过程：

奉上代码：

#include<iostream>
#include<cstring>
#include<stack>
#include<utility>
#define LEFTUP 0
#define LEFT 1
#define UP 2
using  namespace  std;
int  Max( int  a, int  b, int  c, int  *max){             //找最大者时a的优先级别最高，c的最低.最大值保存在*max中
     int  res=0;           //res记录来自于哪个单元格
     *max=a;
     if (b>*max){
         *max=b;
         res=1;
     }
     if (c>*max){
         *max=c;
         res=2;
     }
     return  res;
}
//调用此函数时请注意把较长的字符串赋给str1,这主要是为了在回溯最长子序列时节省时间。如果没有把较长的字符串赋给str1不影响程序的正确执行。
string LCS( const  string &str1, const  string &str2){
     int  xlen=str1.size();                //横向长度
     int  ylen=str2.size();                //纵向长度
     if (xlen==0||ylen==0)                 //str1和str2中只要有一个为空，则返回空
         return  "" ;
     pair< int , int > arr[ylen+1][xlen+1];     //构造pair二维数组，first记录数据，second记录来源
     for ( int  i=0;i<=xlen;i++)          //首行清0
         arr[0][i].first=0;
     for ( int  j=0;j<=ylen;j++)          //首列清0
         arr[j][0].first=0;
     for ( int  i=1;i<=ylen;i++){
         char  s=str2.at(i-1);
         for ( int  j=1;j<=xlen;j++){
             int  leftup=arr[i-1][j-1].first;
             int  left=arr[i][j-1].first;
             int  up=arr[i-1][j].first;
             if (str1.at(j-1)==s)          //C1==C2
                 leftup++;
             int  max;
             arr[i][j].second=Max(leftup,left,up,&arr[i][j].first);
//          cout<<arr[i][j].first<<arr[i][j].second<<" ";
         }
//      cout<<endl;
     }      
     //回溯找出最长公共子序列
     stack< int > st;
     int  i=ylen,j=xlen;
     while (!(i==0&&j==0)){
         if (arr[i][j].second==LEFTUP){
             if (arr[i][j].first==arr[i-1][j-1].first+1)
                 st.push(i);
             --i;
             --j;
         }
         else  if (arr[i][j].second==LEFT){
             --j;
         }
         else  if (arr[i][j].second==UP){
             --i;
         }
     }
     string res= "" ;
     while (!st.empty()){
         int  index=st.top()-1;
         res.append(str2.substr(index,1));
         st.pop();
     }
     return  res;
}
int  main(){
     string str1= "GCCCTAGCG" ;
     string str2= "GCGCAATG" ;
     string lcs=LCS(str1,str2);
     cout<<lcs<<endl;
     return  0;
}
下面给一个Java版本

public  static  <E> List<E> longestCommonSubsequence(E[] s1,E[] s2){
         int [][] num= new  int [s1.length+ 1 ][s2.length+ 1 ];
         for ( int  i= 1 ;i<s1.length;i++){
             for ( int  j= 1 ;j<s2.length;j++){
                 if (s1[i- 1 ].equals(s2[j- 1 ])){
                     num[i][j]= 1 +num[i- 1 ][j- 1 ];
                 }
                 else {
                     num[i][j]=Math.max(num[i- 1 ][j],num[i][j- 1 ]);
                 }
             }
         }
         System.out.println( "lenght of LCS= " +num[s1.length][s2.length]);
         int  s1position=s1.length,s2position=s2.length;
         List<E> result= new  LinkedList<E>();
         while (s1position!= 0  && s2position!= 0 ){
             if (s1[s1position- 1 ].equals(s2[s2position- 1 ])){
                 result.add(s1[s1position- 1 ]);
                 s1position--;
                 s2position--;
             }
             else  if (num[s1position][s2position- 1 ]>=num[s1position- 1 ][s2position]){
                 s2position--;
             }
             else {
                 s1position--;
             }
         }
         Collections.reverse(result);
         return  result;
     }
std::endl是一个特殊值，称为操纵符（manipulator），将它写入输出流时具有输出换行的效果，并刷新与设备相关联的缓冲区(buffer)。通过刷新缓冲区用户可立即看到写入到流中的输出。
我在调试以上代码时在45行（cout<<endl;）处设置断点，结果发现“43行（cout<<arr[i][j].first<<arr[i][j].second<<" ";） 没有执行”，这就是因为43行末尾没有加endl，所以用户没有立即看到输出流中的数据。


7.最大子序列和
最大子序列是要找出由数组成的一维数组中和最大的连续子序列。比如{5,-3,4,2}的最大子序列就是 {5,-3,4,2}，它的和是8,达到最大；而 {5,-6,4,2}的最大子序列是{4,2}，它的和是6。你已经看出来了，找最大子序列的方法很简单，只要前i项的和还没有小于0那么子序列就一直向后扩展，否则丢弃之前的子序列开始新的子序列，同时我们要记下各个子序列的和，最后找到和最大的子序列。
下面介绍一个线性的算法，这个算法是许多聪明算法的典型：运行时间是明显的，但是正确性则很不明显（不容易理解）。
//线性的算法O(N) 
long maxSubSum4(const vector<int>& a) 
{ 
       long maxSum = 0, thisSum = 0; 
       for (int j = 0; j < a.size(); j++) 
       { 
              thisSum += a[j]; 
              if (thisSum > maxSum) 
                     maxSum = thisSum; 
              else if (thisSum < 0) 
                     thisSum = 0; 
       } 
       return maxSum; 
}









