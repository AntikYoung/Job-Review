视图是从一个或几个基本表（或视图）导出的表。它与基本表不同，是一个虚表。数据库中只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在原来的基本表中。所以基本表中的数据发生变化，从视图中查询出的数据也就随之改变了。从这个意义上讲，视图就像是一个窗口，透过它可以看到数据库中自己感兴趣的数据及其变化。

视图一经定义，就可以和基本表一样被查询，被删除。也可以在一个视图之上再定义新的视图，但对视图的更新（增删改）操作则有一定的限制。

1.视图定义
SQL语言用CREATE VIEW命令建立视图，其一般格式为
CREATE VIEW <视图名> [ ( <列名>[,<列名>]....)]
AS <子查询>
[WITH CHECK OPTION]

其中，子查询可以是任意复杂的SELECT语句，但通常不允许含有ORDER BY子句和DISTINCT短语。
WITH CHECK OPTION 表示对视图进行UPDATE，INSERT和DELETE操作时要保证更新，插入或删除的行满足视图定义中的谓词条件（即子查询中的条件表达式）

组成视图的属性列名或者全部省略或者全部指定，没有第三种选择。如果省略了视图的各个属性列名，则隐含该视图由子查询中SELECT子句目标列中的诸字段组成。但在下列三种情况下必须明确指定组成视图的所有列名：
1）某个目标列不是单纯的属性名，而是聚集函数或列表达式
2）多表连接时选出了几个同名列作为视图的字段。


建立信息系学生的视图
CREATE VIEW IS_Student
AS 
SELECT Sno,Sname,Sage
FROM Student
WHERE Sdept='IS';

RDBMS执行CREATE VIEW语句的结果只是把视图定义存入数据字典，并不执行其中的SELECT语句。只是在对视图查询时，才按视图的定义从基本表中将数据查出。

建立信息系学生的视图，并要求进行修改和插入操作时仍需保证该视图只有信息系的学生。
CREATE VIEW IS_Student
AS
SELECT Sno,Sname,Sage
FROM Student
WHERE Sdept='IS'
WITH CHECK OPTION;
由于在定义IS_Student视图时加上了WITH CHECK OPTION子句，以后对该视图进行插入，修改和删除操作时，RDBMS会自动加上Sdept='IS'的条件。
若一个视图是从单个基本表导出的，并且只是去掉了基本表中的某些行和某些列，但保留了主码，我们称这类视图为行列子集视图。IS_Student视图就是一个行列子集视图。

在定义基本表时，为了减少数据库中的冗余数据，表中值存放基本数据，由基本数据经过各种计算派生出的数据一般不存储的。但由于视图中的数据并不实际存储，所以定义视图时可以根据应用的需要，设置一些派生属性列。这些派生属性由于在基本表中并不实际存在也称它们为虚拟列。带虚拟列的视图也称为带表达式的视图。

将学生的学号及他的平均成绩定义为一个视图
CREATE VIEW S_G(Sno,Gavg)
AS
SELECT Sno,AVG(Grade)
FROM SC
Group BY Sno;





将Student表中所有女生记录定义为一个视图
CREATE VIEW F_Student(F_sno,name,sex,age,dept)
AS
SELECT * 
FROM Student
WHERE Ssex='女';

视图F_Student的属性列与Student的属性列一一对应。如果以后修改了基本表的结构，则Student表与F_Student视图的映像关系就被破坏了，该视图就不能正确工作了。为避免出现这类问题，最好在修改基本表之后删除由该基本表导出的视图，然后重建这个视图。

删除视图
该语句的格式为：
DROP VIEW <视图名> [CASCADE];
视图删除后视图的定义将从数据字典中删除。如果该视图上还导出了其他视图，则使用CASCADE级联删除语句，把该视图和由它导出的所有视图一起删除。
基本表删除后，由该基本表导出的所有视图没有被删除，但均无法使用。删除这些视图需要显示地使用DROP VIEW语句。


查询视图
视图定义后，用户就可以像对基本表一样对视图进行查询。
在信息系学生的视图中找出年龄小于20岁的学生。
SELECT Sno,Sage
FROM IS_Student
WHERE Sage<20;
RDBMS执行对视图的查询时，首先进行有效性检查。检查查询中涉及的表，视图等是否存在。如果存在，则从数据字典中取出视图的定义，把定义中的子查询和用户查询结合起来，转换成等价的对基本表的查询，然后再执行修正了的查询。这一转换过程称为视图消解。


更新视图

更新视图是指通过视图插入，删除和修改数据。
由于视图是不实际存储的虚表，因此对视图的更新，最终要转换为对基本表的更新。像查询视图那样，对视图的更新操作也是通过视图消解，转换成基本表的更新操作。
为防止用户通过视图对数据进行增加没删除，修改时，有意无意地对不属于视图范围内的基本表进行操作，可在定义视图时加上WITH CHECK OPTION子句。这样在视图上增删改数据时，RDBMS会检查视图定义中的条件，若不满足条件，则拒绝执行操作。

WHERE子句中不能用聚集函数作为条件表达式的。

将信息系学生视图IS_Student中学号为200215122的学生的姓名改为“刘晨”。
UPDATE IS_Student
SET Sname='刘晨'
WHERE Sno='200215122'[;


视图的作用
1视图能简化用户的操作
2.视图使用户能以多种角度看待同一数据
视图机制能使不同的用户以不同的方式看待同一数据库，当许多不同种类的用户共享同一个数据库时，这种灵活性非常重要。
3.视图对重构数据库提供了一定程度的逻辑独立性
4.视图能够对机密数据提供安全保护。
5.适当的利用视图可以更清晰的表达查询。
